---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: api
  name: api
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: api
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: broker
  name: broker
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
    - name: "9101"
      port: 9101
      targetPort: 9101
  selector:
    io.kompose.service: broker
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: connect
  name: connect
spec:
  ports:
    - name: "8083"
      port: 8083
      targetPort: 8083
  selector:
    io.kompose.service: connect
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: control-center
  name: control-center
spec:
  ports:
    - name: "9021"
      port: 9021
      targetPort: 9021
  selector:
    io.kompose.service: control-center
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  ports:
    - name: "9200"
      port: 9200
      targetPort: 9200
    - name: "9300"
      port: 9300
      targetPort: 9300
  selector:
    io.kompose.service: elasticsearch
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  ports:
    - name: "3001"
      port: 3001
      targetPort: 3000
  selector:
    io.kompose.service: grafana
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  ports:
    - name: "5601"
      port: 5601
      targetPort: 5601
  selector:
    io.kompose.service: kibana
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: schema-registry
  name: schema-registry
spec:
  ports:
    - name: "8081"
      port: 8081
      targetPort: 8081
  selector:
    io.kompose.service: schema-registry
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: spark
  name: spark
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: spark
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: api
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: api
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: api
    spec:
      containers:
        - env:
            - name: KAFKA_BROKER
              value: broker:9092
          image: api
          name: api
          ports:
            - containerPort: 3000
              hostPort: 3000
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: broker
  name: broker
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: broker
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: broker
    spec:
      containers:
        - env:
            - name: CLUSTER_ID
              value: MkU3OEVBNTcwNTJENDM2Qk
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: CONTROLLER
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: 1@broker:29093
            - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              value: "0"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: PLAINTEXT
            - name: KAFKA_JMX_HOSTNAME
              value: localhost
            - name: KAFKA_JMX_PORT
              value: "9101"
            - name: KAFKA_LISTENERS
              value: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            - name: KAFKA_LOG_DIRS
              value: /tmp/kraft-combined-logs
            - name: KAFKA_NODE_ID
              value: "1"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_PROCESS_ROLES
              value: broker,controller
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
          image: confluentinc/cp-kafka:7.5.2
          name: broker
          ports:
            - containerPort: 9092
              hostPort: 9092
              protocol: TCP
            - containerPort: 9101
              hostPort: 9101
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: connect
  name: connect
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: connect
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: connect
    spec:
      containers:
        - args:
            - bash
            - -c
            - "echo \"Installing connector plugins\"\n# Check latest version here: https://www.confluent.io/hub/confluentinc/kafka-connect-elasticsearch\nconfluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:11.0.1\n#\necho \"Launching Kafka Connect worker\"\n/etc/confluent/docker/run & \n#\necho \"Waiting for Kafka Connect to start\"\nsleep 10 # Attendez quelques secondes pour que Kafka Connect d√©marre\n#\necho \"kafkaConnectInit.sh script\"\nbash /kafkaConnectInit.sh \nsleep infinity\n"
          env:
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: broker:29092
            - name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: CONNECT_CONFIG_STORAGE_TOPIC
              value: _kafka-connect-configs
            - name: CONNECT_GROUP_ID
              value: kafka-connect
            - name: CONNECT_INTERNAL_KEY_CONVERTER
              value: org.apache.kafka.connect.json.JsonConverter
            - name: CONNECT_INTERNAL_VALUE_CONVERTER
              value: org.apache.kafka.connect.json.JsonConverter
            - name: CONNECT_KEY_CONVERTER
              value: org.apache.kafka.connect.json.JsonConverter
            - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
              value: http://schema-registry:8081
            - name: CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN
              value: '[%d] %p %X{connector.context}%m (%c:%L)%n'
            - name: CONNECT_LOG4J_LOGGERS
              value: org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR
            - name: CONNECT_LOG4J_ROOT_LOGLEVEL
              value: INFO
            - name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: CONNECT_OFFSET_STORAGE_TOPIC
              value: _kafka-connect-offsets
            - name: CONNECT_PLUGIN_PATH
              value: /usr/share/java,/usr/share/confluent-hub-components/,/connectors/
            - name: CONNECT_REST_ADVERTISED_HOST_NAME
              value: kafka-connect
            - name: CONNECT_REST_PORT
              value: "8083"
            - name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: CONNECT_STATUS_STORAGE_TOPIC
              value: _kafka-connect-status
            - name: CONNECT_VALUE_CONVERTER
              value: org.apache.kafka.connect.json.JsonConverter
            - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
              value: http://schema-registry:8081
          image: confluentinc/cp-kafka-connect-base:6.1.0
          name: connect
          ports:
            - containerPort: 8083
              hostPort: 8083
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /connectors
              name: connect-claim0
            - mountPath: /kafkaConnectInit.sh
              name: connect-claim1
      restartPolicy: Always
      volumes:
        - name: connect-claim0
          persistentVolumeClaim:
            claimName: connect-claim0
        - name: connect-claim1
          persistentVolumeClaim:
            claimName: connect-claim1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: connect-claim0
  name: connect-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: connect-claim1
  name: connect-claim1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: control-center
  name: control-center
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: control-center
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: control-center
    spec:
      containers:
        - env:
            - name: CONFLUENT_METRICS_TOPIC_REPLICATION
              value: "1"
            - name: CONTROL_CENTER_BOOTSTRAP_SERVERS
              value: broker:29092
            - name: CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER
              value: connect:8083
            - name: CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT
              value: /connectors
            - name: CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS
              value: "1"
            - name: CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS
              value: "1"
            - name: CONTROL_CENTER_REPLICATION_FACTOR
              value: "1"
            - name: CONTROL_CENTER_SCHEMA_REGISTRY_URL
              value: http://schema-registry:8081
            - name: PORT
              value: "9021"
          image: confluentinc/cp-enterprise-control-center:7.5.2
          name: control-center
          ports:
            - containerPort: 9021
              hostPort: 9021
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: elasticsearch
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: elasticsearch
    spec:
      containers:
        - env:
            - name: ES_JAVA_OPTS
              value: -Xms512m -Xmx512m
            - name: bootstrap.memory_lock
              value: "true"
            - name: cluster.routing.allocation.disk.threshold_enabled
              value: "false"
            - name: discovery.type
              value: single-node
            - name: xpack.security.enabled
              value: "false"
          image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
          name: elasticsearch
          ports:
            - containerPort: 9200
              hostPort: 9200
              protocol: TCP
            - containerPort: 9300
              hostPort: 9300
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: elastic-data
      restartPolicy: Always
      volumes:
        - name: elastic-data
          persistentVolumeClaim:
            claimName: elastic-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: elastic-data
  name: elastic-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: grafana
    spec:
      containers:
        - env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "12345"
          image: grafana/grafana:latest
          name: monitoring-grafana
          ports:
            - containerPort: 3000
              hostPort: 3001
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-data
      restartPolicy: Always
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: grafana-data
  name: grafana-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kibana
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: kibana
    spec:
      containers:
        - env:
            - name: ELASTICSEARCH_HOSTS
              value: http://elasticsearch:9200
            - name: ELASTICSEARCH_URL
              value: http://elasticsearch:9200
            - name: SERVER_NAME
              value: kibana.example.org
          image: docker.elastic.co/kibana/kibana:7.16.1
          name: kibana
          ports:
            - containerPort: 5601
              hostPort: 5601
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: schema-registry
  name: schema-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: schema-registry
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: schema-registry
    spec:
      containers:
        - env:
            - name: SCHEMA_REGISTRY_HOST_NAME
              value: schema-registry
            - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
              value: broker:29092
            - name: SCHEMA_REGISTRY_LISTENERS
              value: http://0.0.0.0:8081
          image: confluentinc/cp-schema-registry:7.5.2
          name: schema-registry
          ports:
            - containerPort: 8081
              hostPort: 8081
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: spark
  name: spark
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: spark
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: spark
    spec:
      containers:
        - env:
            - name: SPARK_MODE
              value: master
          image: bitnami/spark:latest
          name: myapp-spark-master
          ports:
            - containerPort: 8080
              hostPort: 8080
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /opt/bitnami/spark/work
              name: spark-claim0
      restartPolicy: Always
      volumes:
        - name: spark-claim0
          persistentVolumeClaim:
            claimName: spark-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: spark-claim0
  name: spark-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: spark-worker
  name: spark-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: spark-worker
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o ./k8s/kompose/k8s_manifests.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/crypto-viz-myapp: "true"
        io.kompose.service: spark-worker
    spec:
      containers:
        - env:
            - name: SPARK_MASTER_URL
              value: spark://spark:7077
            - name: SPARK_MODE
              value: worker
          image: bitnami/spark:latest
          name: myapp-spark-worker
          resources: {}
          volumeMounts:
            - mountPath: /opt/bitnami/spark/work
              name: spark-worker-claim0
      restartPolicy: Always
      volumes:
        - name: spark-worker-claim0
          persistentVolumeClaim:
            claimName: spark-worker-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: spark-worker-claim0
  name: spark-worker-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

